#include "renderer.h"

void renderer_init(Renderer* renderer, const char* vertex_shader_path, const char* fragment_shader_path) {
    // Initialize the camera with your preferred settings
    camera_init(&renderer->camera, (vec3){0.0f, 0.0f, 3.0f}, (vec3){0.0f, 1.0f, 0.0f}, -90.0f, 0.0f, 60.0f);

    // Load and compile the shader program with appropriate paths
    renderer->shader = shader_create(vertex_shader_path, fragment_shader_path);

    // Create and bind the VAO, VBO, and IBO (if applicable) with your mesh data
    float vertices[] = {
        // Position (x, y, z)
        -0.5f, -0.5f, 0.0f,
        0.5f, -0.5f, 0.0f,
        0.5f,  0.5f, 0.0f,
        -0.5f,  0.5f, 0.0f
    };

    unsigned int indices[] = {
        0, 1, 2,
        2, 3, 0
    };

    renderer->vao = vao_create();
    renderer->vbo = vbo_create(GL_ARRAY_BUFFER, false);
    renderer->ibo = ibo_create();
    vao_bind(renderer->vao);
    vbo_buffer(renderer->vbo, vertices, 0, sizeof(vertices));
    vao_attr(renderer->vao, renderer->vbo, 0, 3, GL_FLOAT, 0, 0);
    ibo_buffer(renderer->ibo, indices, sizeof(indices), GL_STATIC_DRAW);
    vao_unbind();

    // Load the texture with your preferred path
    renderer->texture = texture_load("res/dirt.jpeg", true);

    // Set the vertex and index counts based on your mesh data
    renderer->vertex_count = sizeof(vertices) / (sizeof(float) * 3); // Number of vertices divided by the size of a single vertex (3 floats).
    renderer->index_count = sizeof(indices) / sizeof(unsigned int); // Number of indices in the array.
}

void renderer_render(Renderer* renderer) {
    // Use the specified shader program
    shader_use(&renderer->shader);

    // Set uniform values in the shader
    shader_set_mat4(&renderer->shader, "view", renderer->camera.view_matrix);
    shader_set_mat4(&renderer->shader, "projection", renderer->camera.projection_matrix);

    // Set the camera position (optional, if needed in the shader)
    shader_set_vec3(&renderer->shader, "cameraPos", renderer->camera.position);

    // Bind the texture to a texture unit and set the texture sampler uniform
    texture_bind(&renderer->texture, 0);
    shader_set_int(&renderer->shader, "textureSampler", 0);

    // Bind the VAO and draw the mesh using the VAO
    vao_bind(&renderer->vao);
    glDrawArrays(GL_TRIANGLES, 0, renderer->vertex_count);

    // Unbind VAO, shader, and texture
    vao_unbind();
    shader_unuse(&renderer->shader);
    texture_unbind(&renderer->texture);
}

